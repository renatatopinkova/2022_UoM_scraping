knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(dplyr)
# Specify the endpoint
endpoint <- "https://api.nationalize.io?"
# Specify the parameters
param <- "name=renata"
# Query the API
req <- GET(paste0(endpoint, param))
# Explore what we've collected
req
# zobraz obsah žádosti
content(req)
?content
# See the content of the query
content(req)
name <- content(req)
name
bind_rows(name)
bind_cols(name)
?bind_cols
library(tidyr)
name %>% flatten()
?flatten
library(purrr)
name %>% flatten()
name %>% flatten() %>% flatten
name %>% flatten() %>% flatten()
name %>% flatten() %>% flatten() %>% bind_cols
name %>% flatten() %>% flatten()
name %>% flatten() %>% flatten() %>% flatten()
names <- GET("https://nationalize.io?name=renata&name=tomas)
)
names <- GET("https://nationalize.io?name=renata&name=tomas")
content(names)
names <- GET("https://api.nationalize.io?name=renata&name=tomas")
content(names)
names2 <- content(names)
bind_cols(names2)
names2 %>% flatten()
names2 %>% flatten() %>% flatten()
names2 %>% flatten() %>% flatten_df()
names2 %>% flatten_df()
names2 %>% flatten_dfr()
names2 %>% flatten()
names2 %>% flatten() %>% map_df()
names2 %>% flatten() %>% map_df(.x)
names2 %>% flatten() %>% map_df(., as.data.frame)
names2 %>% map_df(., as.data.frame)
names2 %>% map(., as.data.frame)
names2 %>% map_df(., as.data.frame)
peter <- GET(paste0(endpoint, "name=peter"))
peter
content(peter)
get_two <- GET(paste0(endpoint, "name=peter&name=petra"))
get_two
content(get_two)
content(get_two) %>%
purr::map_df(., as.data.frame)
content(get_two) %>%
purrr::map_df(., as.data.frame)
tibble(content(get_two))
tibble(content(get_two)) %>% unnest()
content(get_two) %>%
purrr::map_df(., as.data.frame) %>%
rename(., gsub("country.", ""), starts_with("country."))
content(get_two) %>%
purrr::map_df(., as.data.frame) %>%
rename(., gsub("country.", ""))
content(get_two) %>%
purrr::map_df(., as.data.frame) %>%
rename(., gsub("country.", "", .x))
content(get_two) %>%
purrr::map_df(., as.data.frame) %>%
rename(., ~gsub("country.", "", .x))
content(get_two) %>%
purrr::map_df(., as.data.frame) %>%
rename(starts_with("country."), ~gsub("country.", "", .x))
content(get_two) %>%
purrr::map_df(., as.data.frame) %>%
rename(starts_with("country."), gsub("country.", ""))
content(get_two) %>%
purrr::map_df(., as.data.frame) %>%
rename_with(~gsub("country.", "", .x))
content(get_two) %>%
purrr::map_df(., as.data.frame) %>%
rename_with(~gsub("country\\.", "", .x))
endpoint_gndr <- "https://api.genderize.io?"
jessie <- GET(paste0(endpoint_gndr, "name=jessie"))
content(jessie)
jessie_us <- GET(paste0(endpoint_gndr, "name=jessie", "&country_id=US"))
content(jessie_us)
jessie_gb <- GET(paste0(endpoint_gndr, "name=jessie", "&country_id=GB"))
content(jessie_gb)
content(jessie_us)
content(GET(paste0(endpoint_gndr, "name=jessie", "&country_id=GB", "&name="jessie", "&country_id=US")))
t <- GET(paste0(endpoint_gndr, "name=jessie", "&country_id=GB", "&name="jessie", "&country_id=US"))
t <- GET(paste0(endpoint_gndr, "name=jessie", "&country_id=GB"))
t
t <- GET(paste0(endpoint_gndr, "name=jessie", "&country_id=GB", "&name=jessie", "&country_id=US"))
t
content(t)
t <- GET(paste0(endpoint_gndr, "name[]=jessie", "&country_id=GB", "&name[]=jessie", "&country_id=US"))
t
t <- GET(paste0(endpoint_gndr, "name[]=jessie", "&country_id[]=GB", "&name[]=jessie", "&country_id[]=US"))
t
list(jessie_us, jessie_gb) %>%
purrr:: map_df(., as.data.frame)
list(content(jessie_us), content(jessie_gb)) %>%
purrr:: map_df(., as.data.frame)
list(content(jessie_us), content(jessie_gb)) %>%
purrr:: map_df(., as.data.frame)
list(content(jessie_us), content(jessie_gb)) %>%
purrr:: map_df(as.data.frame)
# the API query content
content(get_two) %>%
# convert the list into a dataframe (one name = one row) with map_df() from purrr package
purrr::map_df(as.data.frame) %>%
# clean up column names
rename_with(~gsub("country\\.", "", .x))
list(content(jessie_us), content(jessie_gb)) %>%
purrr:: map_df(as.data.frame)
as_tibble(get_two)
as_tibble(content(get_two))
GET(paste0(endpoint_gndr, "name=jessie", "&country_id=GB", "&country=US"))
content(GET(paste0(endpoint_gndr, "name=jessie", "&country_id=GB", "&country=US")))
t <- GET(endpoint_gndr, query = list(name = jessie, country_id = US))
t <- GET(endpoint_gndr, query = list(name = "jessie", country_id = "US"))
t
content(t)
# Specify the endpoint
endpoint <- "https://api.nationalize.io?"
# Query the API
req <- GET(endpoint,
query = list(
name = "Renata"
))
# Explore what we've collected
req
# See the content of the query
content(req)
peter <- GET(endpoint,
query = list(
name = "Peter"
))
peter
content(peter)
get_two <- GET(endpoint,
query = list(
name = "Peter",
name = "Petra"
))
get_two
content(get_two)
get_two <- GET(paste0(endpoint, "name=peter&name=petra"))
get_two
content(get_two)
t <- GET(endpoint, query = list(name = "peter", name = "petra"))
content(t)
t <- GET(endpoint, query = list(name[] = "peter", name[] = "petra"))
knitr::opts_chunk$set(echo = TRUE)
## Replace #### with the token you have received via email
endpoint <- "http://www.omdbapi.com/?apikey=bdeff223&"
## Replace #### with the token you have received via email
endpoint <- "http://www.omdbapi.com/?apikey=bdeff223"
knitr::opts_chunk$set(echo = TRUE)
mystery_movie <- GET(endpoint, query=list(i="tt0425112"))
# status ok
mystery_movie
# content
content(mystery_movie)
plt_movie <- GET(endpoint,
query = list(
i = "tt0425112",
plot = "full" ))
# response
plt_movie
# parse content
plt_movie_full <- content(plt_movie)
# show plot
plt_movie_full$Plot
# response
plt_movie
content(plt_movie)
dog <- GET(endpoint,
query = list(s = "dog"))
df_dog <- content(dog)
content(dog)
# omdb zobrazuje 10 výsledků na stránku - strana 2 dává jiné výsledky než strana 1
dog_p2 <- GET(endpoint,
query = list(
s = "dog",
page = 2))
# omdb zobrazuje 10 výsledků na stránku - strana 2 dává jiné výsledky než strana 1
dog_p2 <- GET(endpoint,
query = list(
s = "dog",
page = 2))
dog_p2
content(dog_p2)
bind_rows(df_dog$Search)
bind_rows(df_dog$Search, dog_p2$Search)
dog_p2
content(dog_p2)$Search
df_dog2 <- content(dog_p2)
bind_rows(df_dog$Search, dog_p2$Search)
bind_rows(df_dog$Search, df_dog2$Search)
# Specify the endpoint
endpoint <- "https://api.nationalize.io?"
get_two <- GET(endpoint,
query = list(name = c("pater", "petra")))
get_two <- GET(endpoint,
get_two
get_two <- GET(endpoint,
query = list(name = "peter&petra"))
get_two
content(get_two)
get_two <- GET(endpoint,
query = list(name = "peter|petra"))
get_two
content(get_two)
# Specify the endpoint
endpoint <- "https://api.nationalize.io?"
# Query the API
req <- GET(endpoint,
query = list(
name = "Renata"))
# Explore what we've collected
req
# See the content of the query
content(req)
# Play around with the parsing
content(req, "text") # js notation
content(req, "raw") # not human-readable
content(req, "parsed") # best version - list
content(req, "parsed") %>% as_tibble()
content(req, "parsed") %>% as_tibble() %>% unnest_wider(country)
?unnest_wider
endpoint_gndr <- "https://api.genderize.io?"
jessie <- GET(endpoint_gndr,
query = list(
name = "Jessie"
))
content(jessie)
jessie_us <- GET(endpoint_gndr,
query = list(
name = "Jessie",
country_id = "US"))
content(jessie_us)
jessie_gb <- GET(endpoint_gndr,
query = list(
name = "Jessie",
country_id = "GB"))
content(jessie_gb)
list(content(jessie_us), content(jessie_gb)) %>%
# convert it to tibble
as_tibble() %>%
# unnest the country column
unnest_wider(country)
list(content(jessie_us), content(jessie_gb)) %>%
# convert it to tibble
as_tibble()
list(content(jessie_us), content(jessie_gb))
list(content(jessie_us), content(jessie_gb)) %>%
# convert it to tibble
as_tibble()
list(content(jessie_us), content(jessie_gb)) %>%
# convert it to tibble
purrr::map_df(as.data.frame) %>%
# unnest the country column
rename_with(~gsub("country\\.", ""))
list(content(jessie_us), content(jessie_gb)) %>%
# convert it to tibble
purrr::map_df(as.data.frame) %>%
# unnest the country column
rename_with(~gsub("country\\.", "", .x))
# use the parsed API response
content(req, "parsed") %>%
# convert it to tibble
as_tibble() %>%
# unnest the country column
unnest_wider(country)
list(content(jessie_us), content(jessie_gb)) %>%
# convert to data frame
purrr::map_df(as.data.frame) %>%
# clean up the names
rename_with(~gsub("country\\.", "", .x))
list(content(jessie_us), content(jessie_gb)) %>%
# convert to data frame
purrr::map_df(as.data.frame)
styler:::style_selection()
styler:::style_selection()
styler:::style_selection()
## Replace #### with the token you have received via email
endpoint <- "http://www.omdbapi.com/?apikey=bdeff223"
content(mystery_movie) %>%
as_tibble()
# content
content(mystery_movie)
content(t) %>%
as_tibble()
t <- content(mystery_movie)
content(t) %>%
as_tibble()
# content
t <- content(mystery_movie)
content(t) %>%
as_tibble()
t %>%
as_tibble()
bind_rows(t)
bind_rows(content(mystery_movie))
bind_cols(content(mystery_movie))
glimpse(bind_cols(content(mystery_movie)))
str(mystery_movie)
str(mystery_movie) %>% flatten()
content(mystery_movie) %>% flatten()
query = list(
i = "tt0425112",
plot = "full" ))
plt_movie <- GET(endpoint,
query = list(
i = "tt0425112",
plot = "full" ))
# response
plt_movie
# parse content
plt_movie_full <- content(plt_movie)
# show plot
plt_movie_full$Plot
dog <- GET(endpoint,
query = list(s = "dog"))
df_dog <- content(dog)
df_dog %>%
as_tibble()
bind_rows(df_dog)
df_dog <- content(dog)
bind_rows(df_dog)
bind_rows(df_dog$Search)
# content
content(mystery_movie)
# content
content(mystery_movie) %>%
as_tibble()
?as_tibble
# content
content(mystery_movie)
knitr::opts_chunk$set(echo = TRUE)
library(rvest)
library(dplyr)
# read html into R
intro <- read_html("intro.html", encoding = "UTF-8") # you can omit the encoding argument since the page is in English
intro
### Selects tag that we are interested in BUT also a tag we are NOT interested in --> we have to be more selective
html_elements(intro, "p")
### Same result: Both of the <p> tags are nested inside a <div> tag
html_elements(intro, "div p")
### select <p> tag that is nested inside a <div> with a class =  "one"
html_elements(intro, "div.one p")
### select <p> tag that is nested within any tag that has a class = "one"
html_elements(intro, css = ".one p")
### Getting the text inside the tag
```{r}
# find the element
p_tag <- html_elements(intro, css = ".to-scrape")
# vybrání textu mezi tagy
html_text(p_tag)
knitr::opts_chunk$set(echo = TRUE)
page <- read_html("https://quotes.toscrape.com")
page <- read_html("https://quotes.toscrape.com")
page
quotes <- html_elements(page, ".text") %>%
html_text()
quotes <- html_elements(page, ".text") %>%
html_text()
quotes
authors <- html_elements(page, ".author") %>%
html_text()
authors
as_tibble(text = quotes, author = authors)
tibble(text = quotes, author = authors)
df <- tibble(text = quotes, author = authors)
urls <- html_elements(page, ".quote span a") %>%
html_attr("href")
urls
urls <- paste0("https://quotes.toscrape.com", urls)
urls
# Specify the endpoint
endpoint <- "https://api.nationalize.io?"
# Query the API
req <- GET(endpoint,
# specify the parameters
query = list(
name = "Renata"))
# Explore what we've collected
req
